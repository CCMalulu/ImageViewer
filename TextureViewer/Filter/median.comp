#setting title, Median Filter
#setting description, Chooses the pixel with the average luminance within the filter radius.
#setting singleinvocation, false

#param Radius, 2, Int, 1, 1, 6

layout(location = 2) uniform int RADIUS;


vec4 buf[169];

void bubbleSort(int numLength)
{
	int i = 0;
	int j = 0;
	int flag = 1;
	for(i = 1; (i <= numLength) && (flag != 0); i++)
	{
		flag = 0;
		for (j=0; j < (numLength - i); j++)
		{
			if (buf[j+1].w > buf[j].w)
			{
				vec4 temp = buf[j];
				buf[j] = buf[j+1];
				buf[j+1] = temp;
				flag = 1;
			}
		}
	}
}
			
void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy) + pixelOffset;
	ivec2 imgSize = textureSize(src_image, 0);
	if(pixelCoord.x < imgSize.x && pixelCoord.y < imgSize.y)
	{
		float alpha = texelFetch(src_image, pixelCoord, 0).a;
		// fill buffer
		int count = 0;
		for(int y = max(0, pixelCoord.y - RADIUS); y <= min(pixelCoord.y + RADIUS, imgSize.y-1); ++y)
		for(int x = max(0, pixelCoord.x - RADIUS); x <= min(pixelCoord.x + RADIUS, imgSize.x-1); ++x)
		{
			buf[count].rgb = texelFetch(src_image, ivec2(x,y), 0).rgb;
			buf[count].w = dot(vec3(0.299, 0.587, 0.114), buf[count].rgb);
			++count;
		}
		
		// sort the buffer
		bubbleSort(count);
	
		imageStore(dst_image, pixelCoord, vec4(buf[count/2].rgb, alpha));
	}
}