#setting sepa, true
#setting title, Gaussian Blur
#setting description, The visual effect of this blurring technique is a smooth blur resembling that of viewing the image through a translucent screen, distinctly different from the bokeh effect produced by an out-of-focus lens or the shadow of an object under usual illumination

#param Blur Radius, 3, int, 20, 1
#param Variance, 2, float, 72.46, 1

layout(location = 3) uniform int blur_radius;
layout(location = 2) uniform float VARIANCE;

// Simple Gauss-Kernel. Normalization is not included and must be
// done by dividing through the weight sum.
float kernel(int _offset)
{
	return exp(- _offset * _offset / VARIANCE);
}

vec3 getPixel(int x, int y)
{
	x = clamp(x, 0, textureSize(src_image, 0).x - 1);
	y = clamp(y, 0, textureSize(src_image, 0).y - 1);
	return texelFetch(src_image, ivec2(x,y), 0).rgb;
}

void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy) + pixelOffset;
	
	vec3 pixelSum = vec3(0.0);
	float weightSum = 0.0;
	
	for(int d = -blur_radius; d <= blur_radius; d++)
	{			
		float w = kernel(d);
		weightSum += w;
		ivec2 pos = d * filterDirection + pixelCoord;
		pixelSum += w * getPixel(pos.x, pos.y);
		
	}
}